import{_ as t,v as a,b as e,R as o}from"./chunks/framework.caa0fbaf.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之准备/article-son/八、注解容器的特点及结构示意图.md","filePath":"markdown/学习/Solon 开发之准备/article-son/八、注解容器的特点及结构示意图.md"}'),r={name:"markdown/学习/Solon 开发之准备/article-son/八、注解容器的特点及结构示意图.md"},l=o('<h3 id="_1、solon-容器的运行特点" tabindex="-1">1、Solon 容器的运行特点 <a class="header-anchor" href="#_1、solon-容器的运行特点" aria-label="Permalink to &quot;1、Solon 容器的运行特点&quot;">​</a></h3><ul><li>有什么注解要处理的（注解能力被规范成了四种），提前注册登记</li><li>全局只扫描一次，并在扫描过程中统一处理注解相关</li><li>扫描注入时，目标有即同步注入，没有时则订阅注入</li></ul><h3 id="_2、内部结构示意图" tabindex="-1">2、内部结构示意图： <a class="header-anchor" href="#_2、内部结构示意图" aria-label="Permalink to &quot;2、内部结构示意图：&quot;">​</a></h3><img src="https://solon.noear.org/img/10d8ec9d5e504dbc8b3ec1ac06f56846.png" width="723"><h3 id="_3、支持四种注解能力的处理对象" tabindex="-1">3、支持四种注解能力的处理对象： <a class="header-anchor" href="#_3、支持四种注解能力的处理对象" aria-label="Permalink to &quot;3、支持四种注解能力的处理对象：&quot;">​</a></h3><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td>BeanBuilder</td><td>构建器（比如 @Component 注解，如果没有注册此注解的构建器，则会无视）</td></tr><tr><td>BeanInjector</td><td>注入器（比如 @Db、@CloudConfig、@VaultInject）</td></tr><tr><td>BeanExtractor</td><td>提取器（比如 @Scheduled、@CloudJob）</td></tr><tr><td>BeanAround</td><td>包围处理，即拦截器（比如：@Tran、@Cache）</td></tr></tbody></table><p>Solon Aop 的具体表象：即为注解处理：即必须显示提前埋好切点（不支持表达式 Aop）</p><h3 id="_4、补充" tabindex="-1">4、补充 <a class="header-anchor" href="#_4、补充" aria-label="Permalink to &quot;4、补充&quot;">​</a></h3><ul><li>比如有些需要拼装的活，可以交给配置器（&quot;<a href="/article/324.html">@Configuration</a>&quot; 注解的类）去处理</li><li>或者需要初始化的活，交给生命周期的类（&quot;<a href="/article/480.html">LifecycleBean</a>&quot; 接口实现的组件）去处理</li><li>再可借助 <a href="/article/264.html">事件总线</a> + <a href="/article/240.html">应用生命周期</a> 做些事情</li></ul>',9),n=[l];function d(i,h,c,s,_,u){return a(),e("div",null,n)}const b=t(r,[["render",d]]);export{f as __pageData,b as default};
