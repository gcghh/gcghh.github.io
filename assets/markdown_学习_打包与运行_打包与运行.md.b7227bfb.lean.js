import{_ as a,v as e,b as l,R as r}from"./chunks/framework.caa0fbaf.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/打包与运行/打包与运行.md","filePath":"markdown/学习/打包与运行/打包与运行.md"}'),i={name:"markdown/学习/打包与运行/打包与运行.md"},t=r('<h3 id="打包方式-maven-java" tabindex="-1">打包方式（maven + java） <a class="header-anchor" href="#打包方式-maven-java" aria-label="Permalink to &quot;打包方式（maven + java）&quot;">​</a></h3><ul><li>使用 maven-assembly-plugin 打胖包 [推荐1]（所有代码会合为一个 jar）</li><li>使用 solon-maven-plugin 打胖包 [推荐2]（依赖包会以 jar in jar 形式存在）</li><li>使用 maven-shade-plugin 打胖包（所有代码会合为一个 jar）</li><li>使用 maven-jar-plugin 打散包（依赖包放在 lib/ 目录下）</li></ul><h3 id="运行方式" tabindex="-1">运行方式 <a class="header-anchor" href="#运行方式" aria-label="Permalink to &quot;运行方式&quot;">​</a></h3><ul><li>命令运行： <ul><li><code>java -jar DemoApp.jar</code></li></ul></li><li>借用 systemctl 运行： <ul><li><code>systemctl restart DemoApp</code></li></ul></li><li>代用 docker 运行： <ul><li><code>docker restart DemoApp</code></li></ul></li></ul><h3 id="gradle-打包" tabindex="-1">gradle 打包? <a class="header-anchor" href="#gradle-打包" aria-label="Permalink to &quot;gradle 打包?&quot;">​</a></h3><p>参考 <a href="/start/" target="_blank">《Solon Initializr》</a> 生成的模板项目配置。</p>',6),o=[t];function n(s,d,c,m,u,h){return e(),l("div",null,o)}const v=a(i,[["render",n]]);export{_ as __pageData,v as default};
