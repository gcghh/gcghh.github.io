import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Nami 开发/article-son/一、入门示例.md","filePath":"markdown/学习/Nami 开发/article-son/一、入门示例.md"}'),p={name:"markdown/学习/Nami 开发/article-son/一、入门示例.md"},o=l(`<p>此示例不绑定应用框架，可以在任意 Java 框架下使用。引入依赖：</p><ul><li>编码包： <ul><li>org.noear:nami.coder.snack3</li></ul></li><li>通道包： <ul><li>org.noear:nami.channel.http.okhttp</li></ul></li></ul><p>记得把编译参数打开（参考：<a href="/article/260.html">《编译打包怎样保持参数名不变？》</a>）。</p><h3 id="_1、接口申明" tabindex="-1">1、接口申明： <a class="header-anchor" href="#_1、接口申明" aria-label="Permalink to &quot;1、接口申明：&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IComplexModelService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//持久化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ComplexModel</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">model</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//读取</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ComplexModel</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">modelId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2、使用示例" tabindex="-1">2、使用示例： <a class="header-anchor" href="#_2、使用示例" aria-label="Permalink to &quot;2、使用示例：&quot;">​</a></h3><ul><li>使用直接地址</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">IComplexModelService</span><span style="color:#A6ACCD;"> service </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Nami</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encoder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SnackTypeEncoder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decoder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SnackDecoder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">channel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">HttpChannel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:8080/ComplexModelService/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//控制器的地址</span></span>
<span class="line"><span style="color:#89DDFF;">                                        </span><span style="color:#676E95;font-style:italic;">//.timeout(10) //超时，可选</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">IComplexModelService</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ComplexModel</span><span style="color:#A6ACCD;"> tmp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> service</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        service</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>使用负载均衡 + 路径</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class Demo{</span></span>
<span class="line"><span style="color:#A6ACCD;">    IComplexModelService service = Nami.builder()</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .encoder(SnackTypeEncoder.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .decoder(SnackDecoder.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .channel(HttpChannel.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .path(&quot;/ComplexModelService/&quot;) //控制器的路径</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .upstream(()-&gt;&quot;http://localhost:8080&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        //.timeout(10) //超时，可选</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .create(IComplexModelService.class);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    @Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    public void test(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        ComplexModel tmp = service.read(1);</span></span>
<span class="line"><span style="color:#A6ACCD;">        service.save(tmp);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><ul><li>使用服务名 + 路径（一般要与应用框架适配，将服务名转为负载均衡）</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class Demo{</span></span>
<span class="line"><span style="color:#A6ACCD;">    IComplexModelService service = Nami.builder()</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .encoder(SnackTypeEncoder.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .decoder(SnackDecoder.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .channel(HttpChannel.instance)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .path(&quot;/ComplexModelService/&quot;) //控制器的路径</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .name(&quot;somplex-api&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        //.timeout(10) //超时，可选</span></span>
<span class="line"><span style="color:#A6ACCD;">                                        .create(IComplexModelService.class);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    @Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    public void test(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        ComplexModel tmp = service.read(1);</span></span>
<span class="line"><span style="color:#A6ACCD;">        service.save(tmp);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="_3、可以写个工具类" tabindex="-1">3、可以写个工具类： <a class="header-anchor" href="#_3、可以写个工具类" aria-label="Permalink to &quot;3、可以写个工具类：&quot;">​</a></h3><p>写个工具类，简化接口代理的构建过程。（一般编码、通道是相对固定的）</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NamiUtil</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">clz</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Nami</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encoder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SnackTypeEncoder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decoder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SnackDecoder</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">channel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">HttpChannel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//控制器的地址</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clz</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">IComplexModelService</span><span style="color:#A6ACCD;"> service </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NamiUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:8080/ComplexModelService/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                IComplexModelService</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span></code></pre></div>`,15),e=[o];function c(t,r,D,C,A,y){return a(),n("div",null,e)}const d=s(p,[["render",c]]);export{F as __pageData,d as default};
