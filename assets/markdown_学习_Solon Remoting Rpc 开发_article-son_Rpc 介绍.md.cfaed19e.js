import{_ as t,v as d,b as o,R as e}from"./chunks/framework.caa0fbaf.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon Remoting Rpc 开发/article-son/Rpc 介绍.md","filePath":"markdown/学习/Solon Remoting Rpc 开发/article-son/Rpc 介绍.md"}'),r={name:"markdown/学习/Solon Remoting Rpc 开发/article-son/Rpc 介绍.md"},c=e("<p>故事大概是这样子：<code>客户端</code>通过<code>服务接口</code>将数据流向<code>服务端</code>，当中会经过<code>通道</code>，经过通道时会对数据进行<code>序列化</code>；<code>服务端</code>处理完后，通过<code>通道</code>把处理结果返回给<code>客户端</code>。这个模式有点像打电话交流。</p><p>Solon Rpc 主要由4个组成部分：</p><ul><li>服务接口</li><li>客户端（服务接口的使用者）</li><li>服务端（服务接口的远程实现者；一般还会配合注册与发现服务使用）</li><li>中间通道和序列化（这个是框架层面的，只要引入依赖即可）</li></ul><p>把日常开发的 Service 层从本地实现，变成远程实现，但使用体验还是与本地 Service 差不多。这就是，常见的应用场景了。</p><p><strong>主要注解</strong></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Remoting</td><td>Rpc 的服务端注解。表示一个远程接口实现</td></tr><tr><td>@NamiClient</td><td>Rpc 的客户端注解。表示引用一个远程接口。也可用于 REST api 调用</td></tr></tbody></table><p><strong>支持通道</strong></p><table><thead><tr><th>通道</th><th>说明</th></tr></thead><tbody><tr><td>Http 通道</td><td>适配有：okhttp、hutool.http</td></tr><tr><td>Socket 通道</td><td>基于 SockteD 实现</td></tr><tr><td>WebSocket 通道</td><td>基于 SockteD 实现</td></tr></tbody></table><p><strong>支持序列化方案</strong></p><table><thead><tr><th>通道</th><th>说明</th></tr></thead><tbody><tr><td>Form</td><td>表单模式</td></tr><tr><td>Json</td><td>适配有：snack3、fastjson</td></tr><tr><td>Hessian 通道</td><td>适配有：hessian</td></tr><tr><td>Protostuff 通道</td><td>适配有：protostuff</td></tr></tbody></table>",10),a=[c];function s(n,p,i,l,h,_){return d(),o("div",null,a)}const b=t(r,[["render",s]]);export{R as __pageData,b as default};
