import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之容器/article-son/三、Bean 在容器的两层信息.md","filePath":"markdown/学习/Solon 开发之容器/article-son/三、Bean 在容器的两层信息.md"}'),o={name:"markdown/学习/Solon 开发之容器/article-son/三、Bean 在容器的两层信息.md"},p=l(`<h3 id="_1、剖析-bean-的装包与注册过程" tabindex="-1">1、剖析 Bean 的装包与注册过程 <a class="header-anchor" href="#_1、剖析-bean-的装包与注册过程" aria-label="Permalink to &quot;1、剖析 Bean 的装包与注册过程&quot;">​</a></h3><p>比如，用配置器装配一个 Bean (本质是装配出一个 BeanWrap，并自动注册到容器）：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//同时以名字和类型进行注册 //支持类型或名字注入</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">typed</span><span style="color:#89DDFF;">=true)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DemoService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">demo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DemoServiceImpl</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>以上代码。转成全手动操控的完整过程如下（内部差不多就这么处理，<mark>不要把它用于日常开发</mark>）：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">DemoService</span><span style="color:#A6ACCD;"> bean </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DemoServiceImpl</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//::自身包装器的元信息::</span></span>
<span class="line"><span style="color:#C792EA;">BeanWrap</span><span style="color:#A6ACCD;"> bw </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BeanWrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> DemoServiceImpl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//::在容器里的注册信息::</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//实现上面配置器的效果，需要四行代码</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.demo.DemoServiceImpl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoServiceImpl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoService</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.demo.DemoServiceImpl&lt;D&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//如果是泛型还会这两条</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">putWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.demo.DemoService&lt;T,Y&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="_2、可以这样获取刚才的-beanwrap" tabindex="-1">2、可以这样获取刚才的 BeanWrap <a class="header-anchor" href="#_2、可以这样获取刚才的-beanwrap" aria-label="Permalink to &quot;2、可以这样获取刚才的 BeanWrap&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这是常用的获取方式</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getWrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoService</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//也可以</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getWrap</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.demo.DemoServiceImpl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//获取的 BeanWrap::name() 是 &quot;demo&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getWrap</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoServiceImpl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="_3、bean-在容器里是有两层信息" tabindex="-1">3、Bean 在容器里是有两层信息 <a class="header-anchor" href="#_3、bean-在容器里是有两层信息" aria-label="Permalink to &quot;3、Bean 在容器里是有两层信息&quot;">​</a></h3><p>从上面的过程，可以得出 Bean 在容器里是有两层信息：</p><ul><li>自身包装器的元信息</li><li>在容器里的注册信息（一个包装，可以有多条注册记录）</li></ul>`,10),e=[p];function t(c,r,D,F,y,A){return a(),n("div",null,e)}const m=s(o,[["render",t]]);export{i as __pageData,m as default};
