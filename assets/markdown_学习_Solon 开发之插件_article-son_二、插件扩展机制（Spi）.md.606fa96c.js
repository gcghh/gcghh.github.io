import{_ as s,v as n,b as a,R as l}from"./chunks/framework.caa0fbaf.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之插件/article-son/二、插件扩展机制（Spi）.md","filePath":"markdown/学习/Solon 开发之插件/article-son/二、插件扩展机制（Spi）.md"}'),p={name:"markdown/学习/Solon 开发之插件/article-son/二、插件扩展机制（Spi）.md"},o=l(`<p>插件扩展机制，是基于 “插件” + “配置申明” 实现的解耦的扩展机制（<strong>类似 Spring Factories、Java Spi</strong>）：简单、弹性、自由。它的核心作用，是为模块获得了应用启动入口，并参与了应用生命周期。简称为 Solon 的 Spi。</p><p>我们将一些可复用的能力，独立为一个“插件”。比如像 @Tran、@Cache 之类的注解能力，肯定是希望在所有项目中复用，它们的能力实现就会被封装成一个插件。</p><h3 id="_1、插件扩展机制的实现介绍" tabindex="-1">1、插件扩展机制的实现介绍 <a class="header-anchor" href="#_1、插件扩展机制的实现介绍" aria-label="Permalink to &quot;1、插件扩展机制的实现介绍&quot;">​</a></h3><ul><li>第一步：定制“插件实现类”（即实现插件生命周期的内部处理），实现类不能有注入。</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//X开头可以让文件排序在未位，方便找到</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">XPluginImpl</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AopContext</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//插件启动时...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prestop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Throwable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//插件预停止时（启用安全停止时：预停止后隔几秒才会进行停止）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">stop</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//插件停止时</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>第二步：通过“插件配置文件”申明自己，文件名须全局唯一存在</li></ul><p>约定插件配置文件：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#建议使用包做为文件名，便于识别，且可避免冲突</span></span>
<span class="line"><span style="color:#A6ACCD;">META-INF/solon/{packname}.properties</span></span></code></pre></div><p>约定插件配置内容：</p><div class="language-properties"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#插件实现类配置</span></span>
<span class="line"><span style="color:#F07178;">solon.plugin</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">{PluginImpl}  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#插件优化级配置。越大越优先，默认为0</span></span>
<span class="line"><span style="color:#F07178;">solon.plugin.priority</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">9</span></span></code></pre></div><ul><li>第三步：扫描并发现插件</li></ul><p>程序启动时，扫描<code>META-INF/solon/</code>目录下所有的<code>.properties</code>文件，找到所有的插件并排序。</p><h3 id="_2、示例参考-插件-solon-proxy-只是示例" tabindex="-1">2、示例参考，插件：solon.proxy （只是示例！！！） <a class="header-anchor" href="#_2、示例参考-插件-solon-proxy-只是示例" aria-label="Permalink to &quot;2、示例参考，插件：solon.proxy （只是示例！！！）&quot;">​</a></h3><p>这个插件提供了 <code>@ProxyComponent</code> 注解的能力实现，进而实现Class的动态代理能力。</p><ul><li>插件实现类：<code>src/main/java/org.noear.solon.proxy.XPluginImp.java</code></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">XPluginImp</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AopContext</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beanBuilderAdd</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ProxyComponent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">clz</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bw</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> anno</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            BeanProxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">binding</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bw</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>插件配置文件：<code>src/main/resources/META-INF/solon/solon.proxy.properties</code></li></ul><div class="language-properties"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">solon.plugin</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">org.noear.solon.proxy.XPluginImp</span></span></code></pre></div><ul><li>插件应用示例</li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入 org.noear:solon.proxy 插件之后</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ProxyComponent</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppService</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Inject</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">SqlMapper</span><span style="color:#A6ACCD;"> sqlMapper1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// @ProxyComponent 注解，可为 bean 添加 class 动态代理；进而支持事务注解：@Tran</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Tran</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addApp</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        sqlMapper1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appx_add</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,20),e=[o];function t(c,r,y,i,C,A){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
