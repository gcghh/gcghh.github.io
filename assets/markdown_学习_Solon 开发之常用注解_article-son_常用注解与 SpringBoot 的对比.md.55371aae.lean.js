import{_ as t,v as d,b as r,R as o}from"./chunks/framework.caa0fbaf.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之常用注解/article-son/常用注解与 SpringBoot 的对比.md","filePath":"markdown/学习/Solon 开发之常用注解/article-son/常用注解与 SpringBoot 的对比.md"}'),e={name:"markdown/学习/Solon 开发之常用注解/article-son/常用注解与 SpringBoot 的对比.md"},n=o('<h3 id="_1、注解对比" tabindex="-1">1、注解对比 <a class="header-anchor" href="#_1、注解对比" aria-label="Permalink to &quot;1、注解对比&quot;">​</a></h3><table><thead><tr><th>Solon 2.2.0</th><th>Springboot 2.7.8 / 3.1.0</th><th>说明</th></tr></thead><tbody><tr><td>@Inject *</td><td>@Autowired</td><td>注入Bean（by type）</td></tr><tr><td>@Inject(&quot;name&quot;)</td><td>@Qualifier+@Autowired</td><td>注入Bean（by name）</td></tr><tr><td>@Inject(&quot;${name}&quot;)</td><td>@Value(&quot;${name}&quot;)<br>@ConfigurationProperties(prefix=&quot;name&quot;)</td><td>注入配置</td></tr><tr><td>@Singleton</td><td>@Scope(“singleton”)</td><td>单例（Solon 默认是单例）</td></tr><tr><td>@Singleton(false)</td><td>@Scope(“prototype”)</td><td>非单例</td></tr><tr><td></td><td></td><td></td></tr><tr><td>@Import</td><td>@Import + @ComponentScan</td><td>配置组件导入或扫描（一般加在启动类上）</td></tr><tr><td>@PropertySource</td><td>@PropertySource</td><td>配置属性源（一般加在启动类上）</td></tr><tr><td></td><td></td><td></td></tr><tr><td>@Configuration</td><td>@Configuration</td><td>配置类</td></tr><tr><td>@Bean</td><td>@Bean</td><td>配置Bean</td></tr><tr><td>@Condition</td><td>@ConditionalOnClass + @ConditionalOnProperty</td><td>配置条件</td></tr><tr><td></td><td></td><td></td></tr><tr><td>@Controller</td><td>@Controller,@RestController</td><td>控制器类（有类代理）</td></tr><tr><td>@Remoting</td><td></td><td>远程控制器类（有类代理；即RPC服务端）</td></tr><tr><td>@Mapping ...</td><td>@RequestMapping,@GetMapping...</td><td>映射</td></tr><tr><td>@Param</td><td>@RequestParam</td><td>请求参数</td></tr><tr><td>@Header</td><td>@RequestHeader</td><td>请求头</td></tr><tr><td>@Cookie</td><td>@CookieValue</td><td>请求Cookie</td></tr><tr><td>@Body</td><td>@RequestBody</td><td>请求体</td></tr><tr><td></td><td></td><td></td></tr><tr><td>@Component</td><td>@Component</td><td>普通托管组件</td></tr><tr><td>@ProxyComponent</td><td>@Service,@Dao,@Repository</td><td>代理托管组件（可拦截）</td></tr><tr><td></td><td></td><td></td></tr><tr><td>@TestPropertySource</td><td>@TestPropertySource</td><td>配置测试属性源</td></tr><tr><td>@TestRollback</td><td>@TestRollback</td><td>执行测试回滚</td></tr><tr><td></td><td></td><td></td></tr><tr><td>LifecycleBean</td><td>InitializingBean + DisposableBean</td><td>组件初始化和销毁</td></tr><tr><td></td><td></td><td></td></tr><tr><td><b>Solon 2.2.0</b></td><td><b>Java EE / Jakarta</b></td><td></td></tr><tr><td>LifecycleBean::start</td><td>@PostConstruct</td><td>组件构造完成并注入后的初始化</td></tr><tr><td>LifecycleBean::stop</td><td>@PreDestroy</td><td>组件销毁</td></tr></tbody></table><h3 id="_2、补充说明" tabindex="-1">2、补充说明 <a class="header-anchor" href="#_2、补充说明" aria-label="Permalink to &quot;2、补充说明&quot;">​</a></h3><ul><li>Solon 的 @Inject 算是： Spring 的@Value、@Autowired、@Qualifier 三者的结合，但又不完全等价</li><li>Solon 的 @Import 同时有导入和扫描的功能</li><li>Solon 的 Bean 生命周期：new() - &gt; @Inject -&gt; afterInjection()- &gt; start() -&gt; stop()</li><li>注1：Method@Bean，只执行一次（只在 @Configuration 里有效）</li><li>注2：@Inject 的参数注入，只在 Method@Bean 上有效</li><li>注3：@Inject 的类注入，只在 @Configuration类 上有效</li><li>注4：@Import 只在 主类上 或者 @Configuration类 上有效</li></ul>',4),a=[n];function i(l,s,p,c,u,m){return d(),r("div",null,a)}const S=t(e,[["render",i]]);export{h as __pageData,S as default};
