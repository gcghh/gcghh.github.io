import{_ as a,v as s,b as o,R as t}from"./chunks/framework.caa0fbaf.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon Native 开发/article-son/了解 Aot 技术.md","filePath":"markdown/学习/Solon Native 开发/article-son/了解 Aot 技术.md"}'),l={name:"markdown/学习/Solon Native 开发/article-son/了解 Aot 技术.md"},n=t(`<h3 id="_1、java-aot" tabindex="-1">1、Java Aot <a class="header-anchor" href="#_1、java-aot" aria-label="Permalink to &quot;1、Java Aot&quot;">​</a></h3><p>Aot 是 Ahead-Of-Time 的缩写，大家都知道 Java 是一个半编译、半解释型语言。它把 Java 文件编译成 class 文件，之后 JVM 解释执行 class 文件，JVM 可以把 class 文件解释为对应的机器码，这个就是所谓的 JIT。Aot 则是直接把 class 文件编译系统的库文件，不在依靠 JIT 去做这个事情。</p><ul><li>好处是：</li></ul><p>内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中</p><ul><li>坏处是：</li></ul><p>无运行时性能加成，不能根据程序运行情况做进一步的优化，程序运行前编译会使程序安装的时间增加</p><h3 id="_2、solon-aot" tabindex="-1">2、Solon Aot <a class="header-anchor" href="#_2、solon-aot" aria-label="Permalink to &quot;2、Solon Aot&quot;">​</a></h3><p>Solon Aot 是 Solon Native 的关键技术，参与了 Java Aot 的部分生成命周期。它在编译时，将所有框架可探测到的：</p><ul><li>动态类代理预编译为Java代码（否则是由Asm字节码生成）</li><li>Jdk 代理接品进行元信息登记</li><li>反射类进行元信息登记</li><li>资源文件进行元信息登记</li><li>等</li></ul><p>大概的编译过程：</p><ul><li>常规编译</li><li>编译时执行 SolonAotProcessor（solon.aot 里的处理类）</li><li>编译时生成动态类代理并编译为class文件</li><li>编译为原生程序</li></ul><h3 id="_3、runtimenativeregistrar" tabindex="-1">3、RuntimeNativeRegistrar <a class="header-anchor" href="#_3、runtimenativeregistrar" aria-label="Permalink to &quot;3、RuntimeNativeRegistrar&quot;">​</a></h3><p>Solon Aot 在自动处理之外，还提供了重要一项目定制接口&quot;RuntimeNativeRegistrar&quot;：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RuntimeNativeRegistrar</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">AopContext</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">RuntimeNativeMetadata</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">metadata</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>用于在 SolonAotProcessor 执行时，添加无法自动处理的元信息登记。</p>`,15),e=[n];function i(r,p,c,A,d,u){return s(),o("div",null,e)}const v=a(l,[["render",i]]);export{m as __pageData,v as default};
