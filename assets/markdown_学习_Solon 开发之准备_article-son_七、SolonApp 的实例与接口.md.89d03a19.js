import{_ as t,v as s,b as a,R as d}from"./chunks/framework.caa0fbaf.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之准备/article-son/七、SolonApp 的实例与接口.md","filePath":"markdown/学习/Solon 开发之准备/article-son/七、SolonApp 的实例与接口.md"}'),n={name:"markdown/学习/Solon 开发之准备/article-son/七、SolonApp 的实例与接口.md"},o=d(`<p>SolonApp 是框架的核心对象，也是应用生命周期的主体。一般通过 Solon.start(...) 产生，通过 Solon.app() 获取：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SolonMain</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoApp</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//可以在 start() 返回得到它</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SolonApp</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> app</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//可以通初始化函数获得它</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//最重要的是：start() 后，通过全局实例得到它（为手动开发提供便利）：</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">();</span></span></code></pre></div><p>提醒：原则上 Solon.start(..) 在一个程序里，只能执行一次。</p><h3 id="_1、了解路由接口-为手动控制提供支持" tabindex="-1">1、了解路由接口（为手动控制提供支持） <a class="header-anchor" href="#_1、了解路由接口-为手动控制提供支持" aria-label="Permalink to &quot;1、了解路由接口（为手动控制提供支持）&quot;">​</a></h3><p>Solon 的路由，可以为 http, websocket, socket 通讯服务。也可以用于非通讯场景。</p><table><thead><tr><th>成员</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>filter(?)</td><td>添加过滤器</td><td></td></tr><tr><td>routerInterceptor(?)</td><td>添加路由拦截器</td><td>v1.12.2 后支持</td></tr><tr><td></td><td></td><td></td></tr><tr><td>before(?)</td><td>添加前置处理</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>get(?)</td><td>添加 get 主处理</td><td></td></tr><tr><td>post(?)</td><td>添加 post 主处理</td><td></td></tr><tr><td>put(?)</td><td>添加 put 主处理</td><td></td></tr><tr><td>patch(?)</td><td>添加 patch 主处理</td><td></td></tr><tr><td>...</td><td>添加 ... 主处理</td><td>主处理有很多</td></tr><tr><td></td><td></td><td></td></tr><tr><td>after(?)</td><td>添加后置处理</td><td></td></tr></tbody></table><p>提示：可以通过 <a href="/article/242.html">《请求处理过程示意图》</a>，了解各接口的作用位置。</p><h3 id="_2、几个重要的成员" tabindex="-1">2、几个重要的成员 <a class="header-anchor" href="#_2、几个重要的成员" aria-label="Permalink to &quot;2、几个重要的成员&quot;">​</a></h3><table><thead><tr><th>成员</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td></td><td></td><td>通过 Solon.app() 可获取当前实例</td></tr><tr><td>context()-&gt;AopContext</td><td>应用上下文（Bean 容器）</td><td>通过 Solon.context() 可快捷获取</td></tr><tr><td>cfg()-&gt;SolonProps</td><td>应用属性或配置</td><td>通过 Solon.cfg() 可快捷获取</td></tr><tr><td></td><td></td><td></td></tr><tr><td>classLoader()</td><td>应用类加载器</td><td></td></tr><tr><td>source()</td><td>应用启动源（或入口类）</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>shared()</td><td>应用共享变量</td><td>会同步到一些插件（比如视图模板）</td></tr><tr><td>sharedAdd(k,v)</td><td>应用共享变量添加</td><td></td></tr><tr><td>sharedGet(k,callback)</td><td>应用共享变量获取</td><td>支持订阅模式</td></tr><tr><td></td><td></td><td></td></tr><tr><td>router()</td><td>应用路由器</td><td>一般不直接使用</td></tr><tr><td>chainManager()</td><td>应用链路管理</td><td>一般不直接使用</td></tr></tbody></table><h3 id="_3、几个重要的开关" tabindex="-1">3、几个重要的开关 <a class="header-anchor" href="#_3、几个重要的开关" aria-label="Permalink to &quot;3、几个重要的开关&quot;">​</a></h3><table><thead><tr><th>成员</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>enableHttp(?)</td><td>启用http通讯</td><td></td></tr><tr><td>enableWebSocket(?)</td><td>启用web socket通讯</td><td></td></tr><tr><td>enableWebSocketD(?)</td><td>启用web socket通讯的D协议</td><td></td></tr><tr><td>enableWebSocketMvc(?)</td><td>启用web socket通讯的mvc能力</td><td></td></tr><tr><td>enableSocketD(?)</td><td>启用socket通讯的D协议</td><td></td></tr><tr><td>enableSocketMvc(?)</td><td>启用socket通讯的mvc能力</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>enableTransaction(?)</td><td>启用事务能力</td><td></td></tr><tr><td>enableCaching(?)</td><td>启用缓存能力</td><td></td></tr><tr><td>enableStaticfiles(?)</td><td>启用静态文件能力</td><td></td></tr><tr><td>enableSessionState(?)</td><td>启用会话状态能力</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td>enableErrorAutoprint(?)</td><td>启用异常自动打印能力</td><td>有异常事件订阅后自动不打印了</td></tr></tbody></table>`,11),l=[o];function r(e,p,c,i,y,D){return s(),a("div",null,l)}const C=t(n,[["render",r]]);export{h as __pageData,C as default};
