import{_ as a,v as e,b as l,R as i}from"./chunks/framework.caa0fbaf.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon Remoting SocketD 开发/article-son/SocketD 协议介绍.md","filePath":"markdown/学习/Solon Remoting SocketD 开发/article-son/SocketD 协议介绍.md"}'),o={name:"markdown/学习/Solon Remoting SocketD 开发/article-son/SocketD 协议介绍.md"},t=i('<p>从某种意义上，SocketD 是 RSocket 等其他类似协议的替代方案。它的消息协议规范具有异步，双向通讯，多路复用，断线重连，基于消息等特性。<code>目前也作为 Solon Rpc 的 Socket 通道协议</code>。</p><h3 id="_1、背景" tabindex="-1">1、背景 <a class="header-anchor" href="#_1、背景" aria-label="Permalink to &quot;1、背景&quot;">​</a></h3><p>RSocket 使用类似 RxJava 的接口风格，一般的同学上手会比较困难。相对的，SocketD 更适合传统使用习惯，这也是推出的重要原因。</p><h3 id="_2、特性" tabindex="-1">2、特性 <a class="header-anchor" href="#_2、特性" aria-label="Permalink to &quot;2、特性&quot;">​</a></h3><p>具有与 RSocket 非常相似的特性：</p><ul><li>具有语言无关性的二进制通信协议</li><li>异步非阻塞消息驱动通信</li><li>可以进行流量控制、连接恢复</li><li>天然支持双向通信。如：单链接双向RPC调用</li><li>更加适合分布式通信场景</li></ul><h3 id="_3、三种交互模型-适应不同应用场景" tabindex="-1">3、三种交互模型，适应不同应用场景 <a class="header-anchor" href="#_3、三种交互模型-适应不同应用场景" aria-label="Permalink to &quot;3、三种交互模型，适应不同应用场景&quot;">​</a></h3><ul><li>Send(msg)：只发送不响应 <ul><li>在不需要响应时非常有用。例如，非关键事件日志记录</li></ul></li><li>SendAndResponse(msg)：发送并等待响应 <ul><li>类似Http的请求/响应模型。它是异步和多路复用的</li></ul></li><li>SendAndCallback(msg, (msg2)-&gt;{})：发送并在有响应时回调 <ul><li>类似Ajax异步回调</li></ul></li></ul><h3 id="_4、两种协议格式" tabindex="-1">4、两种协议格式 <a class="header-anchor" href="#_4、两种协议格式" aria-label="Permalink to &quot;4、两种协议格式&quot;">​</a></h3><ul><li>容器消息，用于实现消息加密或压缩之类非业务处理 <ul><li>flag = 1 : container</li></ul></li></ul><img src="https://solon.noear.org/img/6b816942ed45418f9cc1434ab8e71fbb.png" width="416"><ul><li>内容消息，用于承载业务内容 <ul><li>flag = 10 : message</li><li>flag = 11 : heartbeat message</li><li>flag = 12 : handshake message</li><li>flag = 13 : response message</li></ul></li></ul><img src="https://solon.noear.org/img/a8b339c4f3b24beab28d1a551541ac00.png" width="416">',13),s=[t];function n(r,c,d,h,u,m){return e(),l("div",null,s)}const p=a(o,[["render",n]]);export{g as __pageData,p as default};
