import{_ as a,v as s,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之准备/article-son/四、Bean 生命周期.md","filePath":"markdown/学习/Solon 开发之准备/article-son/四、Bean 生命周期.md"}'),t={name:"markdown/学习/Solon 开发之准备/article-son/四、Bean 生命周期.md"},e=l(`<p>Bean 因为是被容器托管的，所以它的生命周期只限定在容器内部：</p><table><thead><tr><th>时机点</th><th>说明</th><th>补充</th></tr></thead><tbody><tr><td></td><td>AopContext::new() 是在应用初始化时执行</td><td></td></tr><tr><td>::new()</td><td>AopContext::beanScan() 时，符合条件的才构造</td><td>此时，未登记到容器</td></tr><tr><td>@Inject</td><td>开始执行注入</td><td>之后，登记到容器。并“通知”订阅者</td></tr><tr><td>afterInjection()</td><td>等所有字段注入后执行（包括订阅的，异步）<br>//需要实现 InitializingBean 接口</td><td>v2.2.0 后支持</td></tr><tr><td></td><td>::登记到容器；并发布通知；订阅它的注入会被执行</td><td></td></tr><tr><td>start()</td><td>AopContext::start() 时执行。根据依赖关系自动排序<br>//需要实现 LifecycleBean 接口</td><td>自动排序，v2.2.8 后支持</td></tr><tr><td>stop()</td><td>AopContext::stop() 时执行<br>//需要实现 LifecycleBean 接口</td><td>v2.2.0 后支持</td></tr></tbody></table><img src="https://solon.noear.org/img/d3d8145f830244359f252c2cca9673af.png" width="600"><h3 id="_1、时机点介绍" tabindex="-1">1、时机点介绍 <a class="header-anchor" href="#_1、时机点介绍" aria-label="Permalink to &quot;1、时机点介绍&quot;">​</a></h3><h4 id="new" tabindex="-1">::new() <a class="header-anchor" href="#new" aria-label="Permalink to &quot;::new()&quot;">​</a></h4><p>即构建函数。是在 Bean 被扫描时，且符合条件才会执行。此时，还未入到容器</p><h4 id="inject" tabindex="-1">@Inject <a class="header-anchor" href="#inject" aria-label="Permalink to &quot;@Inject&quot;">​</a></h4><p>开始执行注入。之后就会“登记”到容器，并“通知”订阅者。</p><h4 id="afterinjection" tabindex="-1">afterInjection() <a class="header-anchor" href="#afterinjection" aria-label="Permalink to &quot;afterInjection()&quot;">​</a></h4><p>需要实现 InitializingBean 或 LifecycleBean 接口。等所有字段完成注入后执行（包括订阅的，异步）。提示：</p><ul><li>只能确保同步注入的内容是绝对可用</li><li>字段注入的 Bean ，它自身的字段注入有可能未完成（可能仍在“订阅”等待中）</li><li>如果有字段一直未注入，则函数不会被触发！！！</li></ul><h4 id="start" tabindex="-1">start() <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start()&quot;">​</a></h4><p>AopContext::start() 时被执行。其中 start() 需要 实现 LifecycleBean 接口。此时 Bean 扫描已完成，一般的 Bean 都已进入容器。理论上：</p><ul><li>所有的 Bean 都已产生</li><li>所有 Bean 的字段，都已完成注入</li></ul><p>偶有些 Bean 是在 AopContext.start() 时才生产的，例外！</p><h4 id="stop" tabindex="-1">stop() <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop()&quot;">​</a></h4><p>AopContext::stop() 时被执行。也就是容器停止时被执行。时机点，比插件的 stop() 要晚一点。</p><h3 id="_2、应用" tabindex="-1">2、应用 <a class="header-anchor" href="#_2、应用" aria-label="Permalink to &quot;2、应用&quot;">​</a></h3><h4 id="a-一般的组件" tabindex="-1">a）一般的组件 <a class="header-anchor" href="#a-一般的组件" aria-label="Permalink to &quot;a）一般的组件&quot;">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoCom</span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="b-实现-initializingbean-接口的组件" tabindex="-1">b）实现 InitializingBean 接口的组件 <a class="header-anchor" href="#b-实现-initializingbean-接口的组件" aria-label="Permalink to &quot;b）实现 InitializingBean 接口的组件&quot;">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoCom</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InitializingBean</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">afterInjection</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//当所有字段完成注入后，才会执行（如果有字段一直未注入，则函数不会被触发）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h4 id="c-实现-lifecyclebean-接口的组件" tabindex="-1">c）实现 LifecycleBean 接口的组件 <a class="header-anchor" href="#c-实现-lifecyclebean-接口的组件" aria-label="Permalink to &quot;c）实现 LifecycleBean 接口的组件&quot;">​</a></h4><p>这个接口，只对单例有效。非单例，仅扫描时产生的实例会被纳管。其它实例的生命周期要自己处理。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoCom</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LifecycleBean</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">afterInjection</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//当所有字段完成注入后，才会执行（如果有字段一直未注入，则函数不会被触发）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//在 AopContext:start() 时被调用。此时所有bean扫描已完成，订阅注入已完成</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">stop</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//在 AopContext:stop() 时被调用。一般做些释放或停止类的工作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,25),o=[e];function p(c,r,i,d,y,C){return s(),n("div",null,o)}const h=a(t,[["render",p]]);export{D as __pageData,h as default};
