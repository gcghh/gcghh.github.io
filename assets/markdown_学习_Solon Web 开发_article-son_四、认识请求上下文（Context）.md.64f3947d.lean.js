import{_ as t,v as s,b as a,R as n}from"./chunks/framework.caa0fbaf.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon Web 开发/article-son/四、认识请求上下文（Context）.md","filePath":"markdown/学习/Solon Web 开发/article-son/四、认识请求上下文（Context）.md"}'),o={name:"markdown/学习/Solon Web 开发/article-son/四、认识请求上下文（Context）.md"},l=n(`<p>Handler + Context 架构，是Solon Web 的基础。在 Context （org.noear.solon.core.handle.Context）里可以获取：</p><ul><li>请求相关的对象与接口</li><li>会话状态相关的对象与接口</li><li>响应相关的对象与接口</li></ul><p>或者理解所有请求与响应相关的，都在它身上。关于架构方面，可以再看看<a href="/article/idea.html">《想法与架构笔记》</a></p><h3 id="_1、三种获取-context-的方式" tabindex="-1">1、三种获取 Context 的方式 <a class="header-anchor" href="#_1、三种获取-context-的方式" aria-label="Permalink to &quot;1、三种获取 Context 的方式&quot;">​</a></h3><p>a) 通过 Controller 获取</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloController</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Mapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hello</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//可以注入 ctx:Context</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>b) 通过 Handler 或 Filter 或 RouterInterceptor 接口方式获取</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> app</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">output</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)));</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//或者，用以组件方式编写</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Mapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Handler</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Throwable</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">output</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> ctx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>c) 直接获取（基于 ThreadLocal 实现）</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">Context</span><span style="color:#A6ACCD;"> ctx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">current</span><span style="color:#89DDFF;">();</span></span></code></pre></div><h3 id="_2、关于-context-path-的类似效果-基于-pathnew-实现" tabindex="-1">2、关于 context-path 的类似效果（基于 pathNew 实现） <a class="header-anchor" href="#_2、关于-context-path-的类似效果-基于-pathnew-实现" aria-label="Permalink to &quot;2、关于 context-path 的类似效果（基于 pathNew 实现）&quot;">​</a></h3><p><strong>添加配置即可</strong>：（v1.11.2 后支持）</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">server.contextPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/test-service/</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p><strong>也可以手动处理</strong>：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DemoApp</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> app</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//使用专用过滤器</span></span>
<span class="line"><span style="color:#A6ACCD;">            app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#89DDFF;">(-</span><span style="color:#F78C6C;">99</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContextPathFilter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/xxx/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//使用专用过滤器（原生路径将不能访问，不建议使用）</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//app.filter(-99, new ContextPathFilter(&quot;/xxx/&quot;, true)); </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3、请求相关的接口" tabindex="-1">3、请求相关的接口 <a class="header-anchor" href="#_3、请求相关的接口" aria-label="Permalink to &quot;3、请求相关的接口&quot;">​</a></h3><table><thead><tr><th>请求相关接口</th><th>说明</th></tr></thead><tbody><tr><td>-request()-&gt;Object</td><td>原始请求对象</td></tr><tr><td>-ip()-&gt;String</td><td>获取源始请求ip（也可能是代理的ip）</td></tr><tr><td>-realIp()-&gt;String</td><td>获取客户端真实IP</td></tr><tr><td>-isMultipart()-bool</td><td>是否为分段内容</td></tr><tr><td>-isMultipartFormData()-&gt;bool</td><td>是否为分段表单数据</td></tr><tr><td>-method()-&gt;String</td><td>获取请求方式</td></tr><tr><td>-protocol()-&gt;String</td><td>获取请求协议</td></tr><tr><td>-protocolAsUpper()-&gt;String</td><td>获取请求协议并大写</td></tr><tr><td>-url()-&gt;String</td><td>获取请求的URL字符串</td></tr><tr><td>-uri()-&gt;URI</td><td>获取请求的URI</td></tr><tr><td>-path()-&gt;String</td><td>获取请求的URI路径</td></tr><tr><td>-pathNew(String)</td><td>设置新路径</td></tr><tr><td>-pathNew()-&gt;String</td><td>获取新路径，不存在则返回原路径</td></tr><tr><td>-pathMap(String)-&gt;NvMap</td><td>获取请求的URI路径变量,根据路径表达式</td></tr><tr><td>-pathAsUpper()-&gt;String</td><td>获取请求的URI路径并大写</td></tr><tr><td>-pathAsLower()-&gt;String</td><td>获取请求的URI路径并小写</td></tr><tr><td>-userAgent()&gt;String</td><td>获取请求的UA</td></tr><tr><td>-contentLength()-&gt;long</td><td>获取内容长度</td></tr><tr><td>-contentType()-&gt;String</td><td>获取内容类型</td></tr><tr><td>-queryString()-&gt;String</td><td>获取查询字符串</td></tr><tr><td>-accept()-&gt;String</td><td>获取 Accept 头信息</td></tr><tr><td>-body()-&gt;String</td><td>获取body内容</td></tr><tr><td>-body(String)-&gt;String</td><td>获取body内容，并按指定字符串解码</td></tr><tr><td>-bodyNew()-&gt;String</td><td>获取新的body</td></tr><tr><td>-bodyNew(String)</td><td>设置新的body</td></tr><tr><td>-bodyAsBytes()-&gt;byte[]</td><td>获取body内容为byte[]</td></tr><tr><td>-bodyAsStream()-&gt;InputStream</td><td>获取body内容为Stream</td></tr><tr><td>-paramValues(String)-&gt;String[]</td><td>获取参数数组</td></tr><tr><td>-param(String)-&gt;String</td><td>获取参数</td></tr><tr><td>-paramOrDefault(String, String)-&gt;String</td><td>获取参数，并给定默认值</td></tr><tr><td>-paramAsInt(String)-&gt;int</td><td>获取参数并转为int</td></tr><tr><td>-paramAsInt(String, int)-&gt;int</td><td>获取参数并转为int, 并给定默认值</td></tr><tr><td>-paramAsLong(String)-&gt;long</td><td>获取参数并转为long</td></tr><tr><td>-paramAsLong(String, long)-&gt;long</td><td>获取参数并转为long,并给定默认值</td></tr><tr><td>-paramAsDouble(String)-&gt;double</td><td>获取参数并转为double</td></tr><tr><td>-paramAsDouble(String, double)-&gt;double</td><td>获取参数并转为double,并给定默认值</td></tr><tr><td>-paramAsDecimal(String)-&gt;BigDecimal</td><td>获取参数并转为BigDecimal</td></tr><tr><td>-paramAsDecimal(String, BigDecimal)-&gt;BigDecimal</td><td>获取参数并转为BigDecimal,并给定默认值</td></tr><tr><td>-paramAsBean(<code>Class&lt;T&gt;</code>)-&gt;T</td><td>获取参数并转为Bean</td></tr><tr><td>-paramMap()-&gt;NvMap</td><td>获取所有参数并转为map</td></tr><tr><td>-paramsMap()-&gt;<code>Map&lt;String, List&lt;String&gt;&gt;</code></td><td>获取所有参数并转为Map</td></tr><tr><td>-paramSet(String, String)</td><td>设置参数</td></tr><tr><td>-paramsAdd(String, String)</td><td>添加参数</td></tr><tr><td>-filesMap()-&gt;<code>Map&lt;String,List&lt;UploadedFile&gt;&gt;</code></td><td>获取所有上传的文件</td></tr><tr><td>-files(String)-&gt;UploadedFile[]</td><td>获取上传文件，可能有多个</td></tr><tr><td>-file(String)-&gt;UploadedFile</td><td>获取上传文件，第一个</td></tr><tr><td>-cookie(String)-&gt;String</td><td>获取 cookie</td></tr><tr><td>-cookie(String, String)-&gt;String</td><td>获取 cookie, 并给定默认值</td></tr><tr><td>-cookieMap()-&gt;NvMap</td><td>获取 cookieMap</td></tr><tr><td>-header(String)-&gt;String</td><td>获取 header</td></tr><tr><td>-headerOrDefault(String, String)-&gt;String</td><td>获取 header,并给定默认值</td></tr><tr><td>-headerValues(String)-&gt;String</td><td>获取 header 数组</td></tr><tr><td>-headerMap()-&gt;NvMap</td><td>获取 headerMap</td></tr><tr><td>-headersMap()-&gt;<code>Map&lt;String, List&lt;String&gt;&gt;</code></td><td>获取 headersMap</td></tr></tbody></table><h3 id="_4、响应相关的接口" tabindex="-1">4、响应相关的接口 <a class="header-anchor" href="#_4、响应相关的接口" aria-label="Permalink to &quot;4、响应相关的接口&quot;">​</a></h3><table><thead><tr><th>响应相关接口</th><th>说明</th></tr></thead><tbody><tr><td>-response()-&gt;Object</td><td>原始响应对象</td></tr><tr><td>-charset(String)</td><td>设置字符集</td></tr><tr><td>-contentType(String)</td><td>设置内容类型</td></tr><tr><td>-contentTypeNew()</td><td>获取设置的新内容类型</td></tr><tr><td>-render(Object)</td><td>渲染数据（比如将对象渲染为 Json 并输出）</td></tr><tr><td>-render(String, Map)</td><td>渲染视图</td></tr><tr><td>-renderAndReturn(Object)-&gt;String</td><td>渲染数据并返回</td></tr><tr><td>-output(byte[])</td><td>输出 字节数组</td></tr><tr><td>-output(InputStream)</td><td>输出 流对象</td></tr><tr><td>-output(String)</td><td>输出 字符串</td></tr><tr><td>-output(Throwable)</td><td>输出 异常对象</td></tr><tr><td>-outputAsJson(String)</td><td>输出为json文本</td></tr><tr><td>-outputAsHtml(String)</td><td>输出为html文本</td></tr><tr><td>-outputAsFile(DownloadedFile)</td><td>输出为文件</td></tr><tr><td>-outputAsFile(File)</td><td>输出为文件</td></tr><tr><td>-outputStream()-&gt;OutputStream</td><td>获取输出流</td></tr><tr><td>-flush()</td><td>冲刷</td></tr><tr><td>-headerSet(String, String)</td><td>设置 header</td></tr><tr><td>-headerAdd(String, String)</td><td>添加 header</td></tr><tr><td>-cookieSet(String, String)</td><td>设置 cookie</td></tr><tr><td>-cookieSet(String, String, int)</td><td>设置 cookie</td></tr><tr><td>-cookieSet(String, String, String, int)</td><td>设置 cookie</td></tr><tr><td>-cookieSet(String, String, String, String, int)</td><td>设置 cookie</td></tr><tr><td>-cookieRemove(String)</td><td>移徐 cookie</td></tr><tr><td>-redirect(String)</td><td>302跳转地址</td></tr><tr><td>-redirect(String, int)</td><td>跳转地址</td></tr><tr><td>-forward(String)</td><td>服务端转换地址</td></tr><tr><td>-status()</td><td>获取输出状态</td></tr><tr><td>-status(int)</td><td>设置输出状态</td></tr></tbody></table><h3 id="_5、会话相关的接口" tabindex="-1">5、会话相关的接口 <a class="header-anchor" href="#_5、会话相关的接口" aria-label="Permalink to &quot;5、会话相关的接口&quot;">​</a></h3><table><thead><tr><th>会话相关接口</th><th>说明</th></tr></thead><tbody><tr><td>-sessionState()-&gt;SessionState</td><td>获取 sessionState</td></tr><tr><td>-sessionId()-&gt;String</td><td>获取 sessionId</td></tr><tr><td>-session(String)-&gt;Object</td><td>获取 session 状态</td></tr><tr><td>-sessionOrDefault(String, T)-&gt;T</td><td>获取 session 状态（类型转换，存在风险）</td></tr><tr><td>-sessionAsInt(String)-&gt;int</td><td>获取 session 状态以 int 型输出</td></tr><tr><td>-sessionAsInt(String, int)-&gt;int</td><td>获取 session 状态以 int 型输出, 并给定默认值</td></tr><tr><td>-sessionAsLong(String)-&gt;long</td><td>获取 session 状态以 long 型输出</td></tr><tr><td>-sessionAsLong(String, long)-&gt;long</td><td>获取 session 状态以 long 型输出, 并给定默认值</td></tr><tr><td>-sessionAsDouble(String)-&gt;double</td><td>获取 session 状态以 double 型输出</td></tr><tr><td>-sessionAsDouble(String, double)-&gt;double</td><td>获取 session 状态以 double 型输出, 并给定默认值</td></tr><tr><td>-sessionSet(String, Object)</td><td>设置 session 状态</td></tr><tr><td>-sessionRemove(String)</td><td>移除 session 状态</td></tr><tr><td>-sessionClear()</td><td>清空 session 状态</td></tr></tbody></table><h3 id="_6、其它查询" tabindex="-1">6、其它查询 <a class="header-anchor" href="#_6、其它查询" aria-label="Permalink to &quot;6、其它查询&quot;">​</a></h3><table><thead><tr><th>其它相关接口</th><th>说明</th></tr></thead><tbody><tr><td>+current()-&gt;Context</td><td>获取当前线程的上下文</td></tr><tr><td>-getLocale()-&gt;Locale</td><td>获取地区</td></tr><tr><td>-setLocale(Locale)</td><td>设置地区</td></tr><tr><td>-setHandled(bool)</td><td>设置处理状态</td></tr><tr><td>-getHandled()</td><td>获取处理状态</td></tr><tr><td>-setRendered(bool)</td><td>设置渲染状态</td></tr><tr><td>-getRendered()</td><td>获取渲染状态</td></tr><tr><td>-attrMap()-&gt;Map</td><td>获取自定义特性并转为Map</td></tr><tr><td>-attr(String)-&gt;Object</td><td>获取上下文特性</td></tr><tr><td>-attrOrDefault(String, T)-&gt;T</td><td>获取上下文特性，并设定默认值</td></tr><tr><td>-attrSet(String, Object)</td><td>设置上下文特性</td></tr><tr><td>-attrSet(Map)</td><td>设置上下文特性</td></tr><tr><td>-attrClear()</td><td>清除上下文特性</td></tr><tr><td>-remoting()-&gt;bool</td><td>是否为远程调用</td></tr><tr><td>-remotingSet(bool)</td><td>设置是否为远程调用</td></tr><tr><td>-result:Object</td><td>用于在处理链中透传处理结果</td></tr><tr><td>-errors:Throwable</td><td>用于在处理链中透传处理错误</td></tr><tr><td>-controller()-&gt;Object</td><td>获取当前控制器</td></tr><tr><td>-action()-&gt;Action</td><td>获取当前动作</td></tr></tbody></table>`,23),r=[l];function e(p,d,c,i,D,y){return s(),a("div",null,r)}const A=t(o,[["render",e]]);export{g as __pageData,A as default};
