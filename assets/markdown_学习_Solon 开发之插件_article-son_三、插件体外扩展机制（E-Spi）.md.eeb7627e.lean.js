import{_ as a,v as s,b as e,R as l}from"./chunks/framework.caa0fbaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之插件/article-son/三、插件体外扩展机制（E-Spi）.md","filePath":"markdown/学习/Solon 开发之插件/article-son/三、插件体外扩展机制（E-Spi）.md"}'),n={name:"markdown/学习/Solon 开发之插件/article-son/三、插件体外扩展机制（E-Spi）.md"},o=l(`<p>插件体外扩展机制，简称：E-Spi。用于解决 fatjar 模式部署时的扩展需求。比如：</p><ul><li>把一些“业务模块”做成插件包放到体外</li><li>把数据源配置文件放到体外，方便后续修改</li></ul><p>其中， .properties 或 .yml 文件都会做为扩展配置加载，.jar 文件会做为插件包加载。</p><h3 id="_1、特点说明" tabindex="-1">1、特点说明 <a class="header-anchor" href="#_1、特点说明" aria-label="Permalink to &quot;1、特点说明&quot;">​</a></h3><ul><li>所有插件包共享ClassLoader、AopContext、配置</li><li>可以打包成一个独立的插件包（放在体外加载），也可以与主程序一起打包。“分”或“合”自由！</li><li>更新体外插件包或配置文件后，需要重启主服务</li><li>E-Spi 是由内核直接提供的支持，不需要其它依赖</li></ul><h3 id="_2、操作说明" tabindex="-1">2、操作说明 <a class="header-anchor" href="#_2、操作说明" aria-label="Permalink to &quot;2、操作说明&quot;">​</a></h3><ul><li>应用属性文件添加扩展目录配置</li></ul><p>目录需要手动创建</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#申明扩展目录为 demo_ext（没有时，不会异常）</span></span>
<span class="line"><span style="color:#F07178;">solon.extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo_ext</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>也可以，目录自动创建。不同的场景可以不同选择</p><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#申明扩展目录为 demo_ext（加!开头，表示自动创建）</span></span>
<span class="line"><span style="color:#F07178;">solon.extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!demo_ext</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><ul><li>文件放置关系</li></ul><p>将一个应用的数据源配置放在扩展目录，以便后续修改，部署效果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">demo.jar</span></span>
<span class="line"><span style="color:#A6ACCD;">demo_ext/_db.properties</span></span></code></pre></div><p>再将一个用户频道或者领域模块做为插件包，部署效果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">demo.jar</span></span>
<span class="line"><span style="color:#A6ACCD;">demo_ext/_db.properties</span></span>
<span class="line"><span style="color:#A6ACCD;">demo_ext/demo_user.jar</span></span>
<span class="line"><span style="color:#A6ACCD;">demo_ext/demo_order.jar</span></span></code></pre></div><h3 id="_3、插件包注意事项" tabindex="-1">3、插件包注意事项 <a class="header-anchor" href="#_3、插件包注意事项" aria-label="Permalink to &quot;3、插件包注意事项&quot;">​</a></h3><ul><li>要么把插件包打成 fatjar</li><li>要么把插件包的依赖打进主应用里，特别的是公共的依赖（推荐）</li></ul><h3 id="_4、具体演示示例" tabindex="-1">4、具体演示示例 <a class="header-anchor" href="#_4、具体演示示例" aria-label="Permalink to &quot;4、具体演示示例&quot;">​</a></h3><p><a href="https://gitee.com/noear/solon-examples/tree/main/2.Solon_Advanced/demo2002-external_ext" target="_blank" rel="noreferrer">demo2002-external_ext</a></p>`,20),t=[o];function p(i,r,c,d,_,m){return s(),e("div",null,t)}const y=a(n,[["render",p]]);export{u as __pageData,y as default};
