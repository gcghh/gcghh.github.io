import{_ as a,v as s,b as t,R as o}from"./chunks/framework.caa0fbaf.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/生态/Solon Native/article-son/solonproxyapt [弃用].md","filePath":"markdown/生态/Solon Native/article-son/solonproxyapt [弃用].md"}'),n={name:"markdown/生态/Solon Native/article-son/solonproxyapt [弃用].md"},l=o(`<div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.noear</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">solon.proxy.apt</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">provided</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="_1、描述" tabindex="-1">1、描述 <a class="header-anchor" href="#_1、描述" aria-label="Permalink to &quot;1、描述&quot;">​</a></h4><p>基础扩展插件，在 solon.proxy 的基础上，增加了动态代理的 apt 实现。此插件在使用时，需要添加 <code>&lt;scope&gt;provided&lt;/scope&gt;</code>。</p><p>它的作用是，在编译时为 @ProxyComponent 注解的类直接生成代理类源码，一同打包。程序运行时，就不再需要 asm 用字节码动态生成代理类。</p><p>进而，为 graalvm native 提供友好支持。</p><h4 id="_2、asm-与-apt-代理类的差别" tabindex="-1">2、Asm 与 Apt 代理类的差别 <a class="header-anchor" href="#_2、asm-与-apt-代理类的差别" aria-label="Permalink to &quot;2、Asm 与 Apt 代理类的差别&quot;">​</a></h4><table><thead><tr><th>差别</th><th>asm</th><th>apt</th></tr></thead><tbody><tr><td>名字</td><td>以 &quot;$$SolonAsmProxy&quot; 结尾</td><td>以 &quot;$$SolonAptProxy&quot; 结尾</td></tr><tr><td>原理</td><td>在运行时，通过 asm 字节码构建代理类</td><td>在编译时，通过 APT 机制生成源码随源码一同编译</td></tr><tr><td>其它</td><td>专用 ClassLoader 加载，在外面找不到这个类</td><td>与源码加载在同一个 ClassLoader 里</td></tr></tbody></table><h4 id="_3、代码应用" tabindex="-1">3、代码应用 <a class="header-anchor" href="#_3、代码应用" aria-label="Permalink to &quot;3、代码应用&quot;">​</a></h4><p>有动态组件的模块里添加 <code>solon.proxy.apt</code> 插件，正常编译打包即可。就像 <code>lombok</code> 那样使用。</p><p>原则上没必要特意使用，有 graalvm native 打包需求时使用即可。</p>`,10),p=[l];function e(r,c,d,i,y,F){return s(),t("div",null,p)}const m=a(n,[["render",e]]);export{h as __pageData,m as default};
