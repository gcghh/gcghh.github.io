import{_ as s,v as a,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之准备/article-son/三、全局未处理异常订阅.md","filePath":"markdown/学习/Solon 开发之准备/article-son/三、全局未处理异常订阅.md"}'),p={name:"markdown/学习/Solon 开发之准备/article-son/三、全局未处理异常订阅.md"},o=l(`<p><mark>提醒：全局的 Web 请求异常处理，请使用 &quot;过滤器&quot; 处理。</mark>（可参考 <a href="/article/206.html">《过滤器、路由拦截器、处理器、拦截器》</a> ）</p><p>因为它与“本地事件总线”有关，所有就挨在了下面。所谓 “全局未处理异常”：其实只是指通过事件总线发布的异常（难免会有什么异常，不方便直接处理的）。目前框架会把未吃掉的、或者不方便处理的异常发布到事件总线。比如：</p><ul><li>启动时产生的异常</li><li>或者计划任务未处理的异常</li><li>或请求中未处理的异常</li><li>或者事务中忽略的异常</li><li>等...</li></ul><p>事件总线默认会用 &quot;err.printStackTrace()&quot; 自动打印。如果希望 <strong>禁掉</strong> 自动打印：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> app</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enableErrorAutoprint</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><p>或者对异常进行订阅，订阅后也会 <strong>禁掉</strong> 自动打印。</p><h3 id="_1、手动订阅" tabindex="-1">1、手动订阅 <a class="header-anchor" href="#_1、手动订阅" aria-label="Permalink to &quot;1、手动订阅&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//获取系统未处理的异常</span></span>
<span class="line"><span style="color:#A6ACCD;">Solon</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> app</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#C792EA;">-&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//或者记录到日志系统，或者别的处理</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span></code></pre></div><p>或者用“SolonBuilder”，在启动前就进行订阅：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SolonBuilder</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">onError</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//或者记录到日志系统，或者别的处理</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DemoApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="_2、注解订阅" tabindex="-1">2、注解订阅 <a class="header-anchor" href="#_2、注解订阅" aria-label="Permalink to &quot;2、注解订阅&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ErrorListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EventListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Throwable</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onEvent</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Throwable</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//或者记录到日志系统，或者别的处理</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面提到“全局未处理异常”，也会包括Web请求产生的未处理异常。反之，被&quot;过滤器&quot;吃掉的异常，这里就不会出现了。</p>`,13),e=[o];function t(c,r,D,y,F,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
