import{_ as t,v as d,b as r,R as o}from"./chunks/framework.caa0fbaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/学习/Solon 开发之常用注解/Solon 开发之常用注解.md","filePath":"markdown/学习/Solon 开发之常用注解/Solon 开发之常用注解.md"}'),e={name:"markdown/学习/Solon 开发之常用注解/Solon 开发之常用注解.md"},n=o("<p>本系列提供Solon 注解方面的知识。且对关键注解会有详细说明。目前常用注解有：</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Inject *</td><td>注入托管对象（by type）</td></tr><tr><td>@Inject(&quot;name&quot;)</td><td>注入托管对象（by name）</td></tr><tr><td>@Inject(&quot;${name}&quot;)</td><td>注入配置（可由基础类型或结构体接收）</td></tr><tr><td></td><td></td></tr><tr><td>@Singleton</td><td>单例申明（Solon 默认是单例）</td></tr><tr><td>@Singleton(false)</td><td>非单例</td></tr><tr><td></td><td></td></tr><tr><td>@Import</td><td>配置组件导入或扫描（作用在启动主类上或 @Configuration 类上，才有效）</td></tr><tr><td>@PropertySource</td><td>配置属性源（作用在启动主类上或 @Configuration 类上，才有效）</td></tr><tr><td></td><td></td></tr><tr><td>@Configuration</td><td>托管配置组件类（与 @Inject, @Bean 共同完成初始化配置、构建托管对象等）</td></tr><tr><td>@Bean</td><td>配置托管对象（作用在 @Configuration 类的函数上，才有效）</td></tr><tr><td>@Condition</td><td>配置条件（v2.1.0 支持）</td></tr><tr><td></td><td></td></tr><tr><td>@Controller</td><td>控制器组件类（支持函数拦截）</td></tr><tr><td>@Remoting</td><td>远程控制器类（有类代理；即RPC服务端）</td></tr><tr><td>@Mapping...</td><td>映射（可附加 @Get、@Post、@Socket 等限定注解）</td></tr><tr><td>@Param</td><td>请求参数（一般没什么用处，需要默认值或名字不同时用）</td></tr><tr><td>@Header</td><td>请求头</td></tr><tr><td>@Cookie</td><td>请求Cookie</td></tr><tr><td>@Body</td><td>请求体（一般没什么用处。仅在注入 body string 时用，其它场景可略）</td></tr><tr><td></td><td></td></tr><tr><td>@ServerEndpoint</td><td>WebSocket 与 Socket 的服务端注解（作用在 Listener 接口实现类上有效）</td></tr><tr><td>@ClientEndpoint</td><td>WebSocket 与 Socket 的客户端端注解（作用在 Listener 接口实现类上有效）</td></tr><tr><td></td><td></td></tr><tr><td>@Component</td><td>普通托管组件（可自动处理特殊对象，且可被注解提取函数）</td></tr><tr><td>@ProxyComponent</td><td>代理托管组件（支持函数拦截和切入）</td></tr><tr><td></td><td></td></tr><tr><td>@TestPropertySource</td><td>配置测试属性源</td></tr><tr><td>@TestRollback</td><td>执行测试回滚</td></tr></tbody></table><p>托管组件的初始化顺序：new() - &gt; @Inject -&gt; afterInjection()- &gt; start() -&gt; stop()</p>",3),a=[n];function i(s,c,l,p,_,S){return d(),r("div",null,a)}const f=t(e,[["render",i]]);export{u as __pageData,f as default};
