import{_ as a,v as s,b as n,R as l}from"./chunks/framework.caa0fbaf.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/云生态/常见问答与分享/article-son/问题如何安全的停止服务.md","filePath":"markdown/云生态/常见问答与分享/article-son/问题如何安全的停止服务.md"}'),e={name:"markdown/云生态/常见问答与分享/article-son/问题如何安全的停止服务.md"},p=l(`<p>所谓“安全的停止服务”（也叫：优雅停止，或者：优雅重启）是指：在一个集群内，一个服务实例停止时，即不影响已有请求，也不影响第三方调用。Solon 在内核层面已提供了停全停止的机制：</p><h3 id="_1、操作说明-通过配置启用" tabindex="-1">1、操作说明（通过配置启用） <a class="header-anchor" href="#_1、操作说明-通过配置启用" aria-label="Permalink to &quot;1、操作说明（通过配置启用）&quot;">​</a></h3><p>或者用启动参数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">java -jar demoapi.jar --stop.safe=1</span></span></code></pre></div><p>或者用jvm参数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">java -Dsolon.stop.safe=1 -jar demoapi.jar</span></span></code></pre></div><p>或者用 container 的环境变量</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">services:</span></span>
<span class="line"><span style="color:#A6ACCD;">  demoapi:</span></span>
<span class="line"><span style="color:#A6ACCD;">    image: demo/demoapi:1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    container_name: demoapi</span></span>
<span class="line"><span style="color:#A6ACCD;">    environment:</span></span>
<span class="line"><span style="color:#A6ACCD;">      - solon.stop.safe=1</span></span>
<span class="line"><span style="color:#A6ACCD;">      - TZ=Asia/Shanghai</span></span>
<span class="line"><span style="color:#A6ACCD;">    ports:</span></span>
<span class="line"><span style="color:#A6ACCD;">      - 8080:8080</span></span></code></pre></div><h3 id="_2、完整的配置" tabindex="-1">2、完整的配置 <a class="header-anchor" href="#_2、完整的配置" aria-label="Permalink to &quot;2、完整的配置&quot;">​</a></h3><div class="language-yml"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">solon.stop.safe</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">#安全停止（0或1）//（v2.1.0 后支持；之前只能用接口启用）</span></span>
<span class="line"><span style="color:#F07178;">solon.stop.delay</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">#安全停止的延时秒数（默认10秒）</span></span></code></pre></div><h3 id="_3、内部原理说明" tabindex="-1">3、内部原理说明 <a class="header-anchor" href="#_3、内部原理说明" aria-label="Permalink to &quot;3、内部原理说明&quot;">​</a></h3><p>启用安全停止后的内部处理流程：（不开启，则没有等待时间）：</p><ol><li>执行插件预停止动作（一般会向注册服务注销自己）</li><li>等3秒（让发现服务同步状态）</li><li>将当前应用标为已停止，请求响应为 503 状态码（标识服务不可用）</li><li>等7秒（用于消化已有的请求）</li><li>执行插件停止动作</li><li>退出进程</li></ol><p>等待时间，是为了让消费端发现服务的状态变化（这里需要一定时间同步；不同框架或中间件时间不同）。</p><h3 id="_4、补充" tabindex="-1">4、补充 <a class="header-anchor" href="#_4、补充" aria-label="Permalink to &quot;4、补充&quot;">​</a></h3><h4 id="a-有注册与发现服务的环镜" tabindex="-1">a) 有注册与发现服务的环镜 <a class="header-anchor" href="#a-有注册与发现服务的环镜" aria-label="Permalink to &quot;a) 有注册与发现服务的环镜&quot;">​</a></h4><p>按以上操作即可。</p><h4 id="b-没有注册与发现服务的环镜" tabindex="-1">b) 没有注册与发现服务的环镜 <a class="header-anchor" href="#b-没有注册与发现服务的环镜" aria-label="Permalink to &quot;b) 没有注册与发现服务的环镜&quot;">​</a></h4><p>比如只使用了 nginx？需要增加503重试机制：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">upstream demoapi {</span></span>
<span class="line"><span style="color:#A6ACCD;">    server 127.0.0.1:9030 weight=10;</span></span>
<span class="line"><span style="color:#A6ACCD;">    server 127.0.0.1:9031 weight=10;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">server {</span></span>
<span class="line"><span style="color:#A6ACCD;">    listen 8081;</span></span>
<span class="line"><span style="color:#A6ACCD;">    location / {</span></span>
<span class="line"><span style="color:#A6ACCD;">        proxy_pass http://demoapi;</span></span>
<span class="line"><span style="color:#A6ACCD;">        proxy_next_upstream error timeout http_503;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>其它环境可以参考 nginx 的配置思路。</p>`,21),o=[p];function t(i,c,r,d,C,h){return s(),n("div",null,o)}const m=a(e,[["render",t]]);export{y as __pageData,m as default};
